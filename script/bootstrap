#!/bin/sh
#
# bootstrap installs things.

DOTFILES_ROOT="`pwd`"

set -e

echo ''

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  if ! [ -f git/gitconfig.dotsymlink ]
  then
    info 'setup gitconfig'

    user ' - What is your github author name?'
    read -e git_authorname
    user ' - What is your github author email?'
    read -e git_authoremail

    sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" git/gitconfig.symlink.example > git/gitconfig.symlink

    success 'gitconfig'
  fi
}

git_submodules() {
	# pull in submodules for my zsh and vim configs 
	info 'git submodule init'
	`git sub-init` > /tmp/dotfiles-git-submodules 2>&1
}

vim_setup(){
	`ln -s .vim/vimrc ~/.vimrc` > /tmp/dotfiles-vim-setup 2>&1
}

font_setup(){
	`cp *.otf ~/Library/Fonts/` > /tmp/dotfiles-font-setup 2>&1
}

link_files () {
  #echo '__LINKING ${1} TO ${2}__'
  ln -s $1 $2
  success "linked $1 to $2"
}

install_dotfiles () {
  info 'installing dotfiles'

  overwrite_all=false
  backup_all=false
  skip_all=false

  # for source in `find $DOTFILES_ROOT -maxdepth 2 -name \*.symlink`
  # I needed a way to link regular files and not just dotfiles
  for source in `find $DOTFILES_ROOT -maxdepth 2 -name \*.symlink -o -name \*.dotsymlink`
  do
	substring=dotsymlink
	if [ "${source/$substring}" = "$source" ] ; then
	  dest="$HOME/`basename \"${source%.*}\"`"
	else
	  dest="$HOME/.`basename \"${source%.*}\"`"
	fi

	info "OUR DESTINATION==> ${dest}"
	info "______"

    #dest="$HOME/.`basename \"${source%.*}\"`"

    if [ -f $dest ] || [ -h $dest ] || [ -d $dest ]
    then

      overwrite=false
      backup=false
      skip=false

      if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
      then
        user "File already exists: `basename $source`, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi

      if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]
      then
        rm -rf $dest
        success "removed $dest"
      fi

      if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
      then
        mv $dest $dest\.backup
        success "moved $dest to $dest.backup"
      fi

      if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]
      then
        link_files $source $dest
      else
        success "skipped $source"
      fi

    else
      link_files $source $dest
    fi

  done
}


git_submodules
vim_setup
font_setup

setup_gitconfig
install_dotfiles


# If we are on a mac, lets install and setup homebrew
if [ "$(uname -s)" == "Darwin" ]
then
  info "installing dependencies"
  if . `~/bin/dot $DOTFILES_ROOT` > /tmp/dotfiles-dot 2>&1
  then
    success "dependencies installed"
  else
    fail "error installing dependencies"
  fi
fi

echo ''
echo '  All installed!'
