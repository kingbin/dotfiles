[user]
  name = Chris Blazek
  email = kingbin13@pm.me
  #email = chris.blazek@gmail.com
  # signingkey = DEDF105A
  # signingkey = DA461230 # pestroutes
  # signingkey = 5164DE33
  # signingkey = 09C4ECFC
  signingkey = B270055C
[includeIf "gitdir:~/Developer/fieldroutes/"]
    path = ~/Developer/fieldroutes/.gitconfig
[github]
  user = kingbin
  email = kingbin13@pm.me
[color]
  ui = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
  whitespace = red reverse
[color "status"]
  added = green
  changed = red bold
  untracked = cyan
[alias]

  sub-init = "!init() { git checkout master && git pull && git submodule update --init --recursive; }; init"
  sub-up = "!up() { git submodule foreach git checkout master && git pull; }; up"
  sub-diff = "!diff() { git submodule foreach 'echo $path `git diff`'; }; diff;"
  springcleaning = for-each-ref --sort=-committerdate --format='%(refname:short) %(committerdate:short)'
  unstage = reset HEAD --
  pu = !="git fetch origin -v; git fetch upstream -v; git merge upstream/master"
#  vim = !.git/hooks/vim

  br = branch
  # show all branches, even across remotes
  branches = branch -a --color -v
  # remove all local branches included in the current branch
  cleanup = !sh -c 'git branch --merged | grep -E "^[^*]" --exclude "^\\s*master" | xargs -n1 git branch -d'
  co = checkout
  ctags = !.git/hooks/ctags
  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat"
  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
  # Diff
  df = diff
  dt = "!d() { git diff-tree --no-commit-id --name-only -r $1; }; d"
# Get short SHA-1 for object
  hash = rev-parse --short HEAD
  lc = log ORIG_HEAD.. --stat --no-merges
  # just for fun
  l33t = !"git shortlog | l33t"
  last = log -1 HEAD
  commiter = log --pretty=format:'%cn committed %h on %cd'
  lol = log --abbrev-commit --pretty=format:'%h %G? - %an, %ad : %s' --graph
  lola = log  --abbrev-commit --pretty=format:'%h %G? - %an, %ad : %s' --graph --all
  loln = log --abbrev-commit --pretty=format:'%h %G? - %an, %ad : %s' --graph --name-status
  ls = ls-files
  # depends on hub
  mypulls = browse -- pulls/kingbin
  # Find FIXME, TODO, etc, optimized by @x3ro https://gist.github.com/3908985
  n = !"f() { git ls-files $1 | xargs notes | awk -F: '{ print $1,$2; print $3,$4; print $5}' | grcat conf.notes | less -r;  }; f"
  pullm = !"git pull origin master"
  pushm = !"git push origin master"
  rb = rebase
  rbc = rebase --continue
  # Interactive rebase with the selected number of latest commits
  reb = "!r() { git rebase -i HEAD~$1; }; r"tags = tag -l
  # track a remote branch
  track = checkout -t
  st = status
  # update all submodules
  subs = submodule foreach git pull origin master
  # clean up fully merged branches
  sweep = !git-sweep
  # list only untracked files
  untracked = ls-files --others --exclude-standard
  # remove a file from the index
  unstage = reset HEAD --
  up = "!git remote update -p; git merge --ff-only @{u}"
  wdiff = diff --color-words
  visual = !gitk
  #stash functions
  sshow = "!f() { git stash show stash^{/$*} -p; }; f"
  ssave = "!f() { git stash save $*; }; f"
  sapply = "!f() { git stash apply stash^{/$*}; }; f"
  slist = "!f() { git stash list; }; f"
  spop = "!f() { git stash pop stash^{/$*}; }; f"
  sdrop = "!f() { git stash drop stash^{/$*}; }; f"
  sbranch = "!f() { git stash branch /$* stash^{1}; }; f"

  statust = "!f() { git status -uno;  }; f"

  # https://stackoverflow.com/questions/8475448/find-merge-commit-which-include-a-specific-commit
  find-merge = "!sh -c 'commit=$0 && branch=${1:-HEAD} && (git rev-list $commit..$branch --ancestry-path | cat -n; git rev-list $commit..$branch --first-parent | cat -n) | sort -k2 -s | uniq -f1 -d | sort -n | tail -1 | cut -f2'"
  show-merge = "!sh -c 'merge=$(git find-merge $0 $1) && [ -n \"$merge\" ] && git show $merge'"

  #showOwnerBranches = "!f() { git stash apply stash^{/$*}; }; f"
  #showOwnerBranches = "!f() { git for-each-ref --format=' %(authorname) %09 %(creatordate) %09 %(refname)' --sort=authorname --sort=-creatordate | grep {/$*}; }; f"
  showOwnerBranches = "!f() { git for-each-ref --format=' %(authorname) %09 %(creatordate) %09 %(refname)' --sort=authorname --sort=-creatordate; }; f"

  # needle = "!f() { git for-each-ref --contains $1 refs/remotes/origin | wc -l; }; f"
  needle = "!f() { git for-each-ref --contains $1 refs/remotes/origin; }; f"


[core]
  editor = vi
  autocrlf = input
  filemode = false
	excludesfile = /Users/chrisblazek/.gitignore_global
  #whitespace = cr-at-eol
  whitespace = blank-at-eol


[web]
    browser = chrome

[help]
  autocorrect = 1

[init]
  templatedir = ~/.git_template

[push]
  default = matching #simple
  followTags = true

[hub]
  protocol = https

[branch]

[diff]
  tool = bc4

[difftool]
  prompt = false

[difftool "bc4"]
  trustExitCode = true
  cmd = `/usr/local/bin/bcomp $LOCAL $REMOTE`

[merge]
  tool = bc4

[mergetool]
  prompt = false

[mergetool "bc4"]
  trustExitCode = true
  cmd = `/usr/local/bin/bcomp $LOCAL $REMOTE $BASE $MERGED`


# vim: ft=gitconfig
#[credential]
#  helper = /opt/boxen/bin/boxen-git-credential

#[difftool "sourcetree"]
#	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
#	path =
#[mergetool "sourcetree"]
#	cmd = /Applications/SourceTree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
#  trustExitCode = true
#
#[mergetool "diffmerge"]
#  cmd = "diffmerge --merge --result=\"$MERGED\" \"$LOCAL\" \"$(if test -f \"$BASE\"; then echo \"$BASE\"; else echo \"$LOCAL\"; fi)\" \"$REMOTE\""
#  trustExitCode = true

#[difftool "Kaleidoscope"]
#	cmd = ksdiff --partial-changeset --relative-path \"$MERGED\" -- \"$LOCAL\" \"$REMOTE\"
#[mergetool "Kaleidoscope"]
#	cmd = ksdiff --merge --output \"$MERGED\" --base \"$BASE\" -- \"$LOCAL\" --snapshot \"$REMOTE\" --snapshot
#	trustExitCode = true

[commit]
  template = /Users/chrisblazek/.gitCommitMsg
  gpgsign = false

[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true
[diff]
  renamelimit = 10000

[gpg]
  #program = /usr/local/bin/gpg
  #program = /opt/homebrew/bin/gpg
  program = /usr/local/MacGPG2/bin/gpg2
#[difftool "sourcetree"]
#	cmd = opendiff \"$LOCAL\" \"$REMOTE\"
#	path = 
[mergetool "sourcetree"]
	cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
	trustExitCode = true
